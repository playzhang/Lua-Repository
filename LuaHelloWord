#!/usr/local/bin/lua	--指定解释器，加上 # 号标记解释器会忽略它
--[[
多行注释
 Lua 是一个区分大小写的编程语言
 一般约定，以下划线开头连接一串大写字母的名字（比如 _VERSION）被保留用于 Lua 内部全局变量。
]]--
print("hello Word")
print("...................................................")
--[[
2.全局变量
在默认情况下，变量总是认为是全局的。
全局变量不需要声明，给一个变量赋值后即创建了这个全局变量，访问一个没有初始化的全局变量也不会出错，只不过得到的结果是：nil。
如果你想删除一个全局变量，只需要将变量赋值为nil。
这样变量b就好像从没被使用过一样。换句话说, 当且仅当一个变量不等于nil时，这个变量即存在。 
]]--
print(a)	--nil。
b=10
print(b)	--10

print("..................................................")
--[[
3.数据类型
	Lua 是动态类型语言，变量不要类型定义,只需要为变量赋值。 值可以存储在变量中，作为参数传递或结果返回。
	8 个基本类型分别为：nil、boolean、number、string、userdata、function、thread 和 table。
	number	表示双精度类型的实浮点数
	function	由 C 或 Lua 编写的函数
	userdata	表示任意存储在变量中的C数据结构
	thread	表示执行的独立线路，用于执行协同程序
	table	Lua 中的表（table）其实是一个"关联数组"（associative arrays），数组的索引可以是数字、字符串或表类型。
	在 Lua 里，table 的创建是通过"构造表达式"来完成，最简单构造表达式是{}，用来创建一个空表。
]]--
print(type(c))
print(type(10.5*4))
print(type(type(b)))

print("..................................................")
--[[
4.nil
	nil 类型表示一种没有任何有效值，它只有一个值 -- nil
	对于全局变量和 table，nil 还有一个"删除"作用，给全局变量或者 table 表里的变量赋一个 nil 值，等同于把它们删掉
	nil 作比较时应该加上双引号 "：
	
]]--
tab1={key1="val1",key2="val2","val3",5}
for k,v in pairs(tab1) 
do
print(k.."-"..v)
end
print("******")
tab1.keey1=6
for k,v in pairs(tab1)
do
print(k.."*"..v)
end
print("******")
print(x)				--nil
print(type(x)==nil)		--false
print(type(x)=="nil")	--true

print("..................................................")
--[[
boolean
	Lua 把 false 和 nil 看作是"假"，其他的都为"真":
]]--
if false or nil then
	print("至少有一个为true")
else
	print("都为false")			--都为false
end

print("..................................................")
--[[
number、string
	Lua 默认只有一种 number 类型 -- double（双精度）类型（默认类型可以修改 luaconf.h 里的定义）
	字符串由一对双引号或单引号来表示。
	也可以用 2 个方括号 '/[/[/]/]' 来表示"一块"字符串。
	在对一个数字字符串上进行算术操作时，Lua 会尝试将这个数字字符串转成一个数字:
	字符串连接使用的是 	..
	使用 # 来计算字符串的长度，放在字符串前面
]]--
print(2)		--number
print(2.2)		--number
print(2e+2)		--number
html = [[
<html>
<head></head>
<body>
    <a href="http://www.runoob.com/">菜鸟教程</a>
</body>
</html>
]]
print("************")
print(html)
print("************")
print("2"+6)		--8
print("2"+"6")		--8
print("************")
len="asdfgh"
print(#len)		--6

print("..................................................")
--[[
table
	在 Lua 里，table 的创建是通过"构造表达式"来完成，最简单构造表达式是{}，用来创建一个空表。也可以在表里添加一些数据，直接初始化表:
	Lua 中的表（table）其实是一个"关联数组"（associative arrays），数组的索引可以是数字或者是字符串。
	在 Lua 里表的默认初始索引一般以 1 开始。
	table 不会固定长度大小，有新数据添加时 table 长度会自动增长，没初始的 table 都是 nil。
]]--
local tab1={}			--创建一个空的table
local tab2={"v1",v2}	--直接初始化表
tab2["key1"]="val1"
key=10
tab2[key]=22
tab2[key]=tab2[key]+11
for k ,v in pairs(tab2)
do
print(k.."*"..v)
end
print(tab2[1])

print("..................................................")
--[[
thread
	在 Lua 里，最主要的线程是协同程序（coroutine）。它跟线程（thread）差不多，拥有自己独立的栈、局部变量和指令指针，可以跟其他协同程序共享全局变量和其他大部分东西。
	线程跟协程的区别：线程可以同时多个运行，而协程任意时刻只能运行一个，并且处于运行状态的协程只有被挂起（suspend）时才会暂停。
userdata
	userdata 是一种用户自定义数据，用于表示一种由应用程序或 C/C++ 语言库所创建的类型，可以将任意 C/C++ 的任意数据类型的数据（通常是 struct 和 指针）存储到 Lua 变量中调用。
]]--

print("..................................................")
--[[
function：函数
	在 Lua 中，函数是被看作是"第一类值（First-Class Value）"，函数可以存在变量里:
	function 可以以匿名函数（anonymous function）的方式通过参数传递:
]]--
function function1(n)
	if n==0 then
		return 1
	else
		return n*function1(n-1)
	end
end
print(function1(5))
function2=function1
print(function2(5))
print("******function 可以以匿名函数（anonymous function）的方式通过参数传递:******")
function testFun(tab,fun)
	for k,v in pairs(tab)
	do
	print(fun(k,v))
	end
end
tab3={"abc","bca","acb","bac","cab","cba"}
testFun(tab3,function(key,val)
	return key.."="..val
	end
)
